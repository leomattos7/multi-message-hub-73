
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ivmtkdgyzogtaxsyzcsn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml2bXRrZGd5em9ndGF4c3l6Y3NuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIxNzI1OTcsImV4cCI6MjA1Nzc0ODU5N30.k1iMjtGFxS6ciQkowiLSpNJHobHOnsVYeWojnJiCjm8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Conversations and messages utility functions
export const conversationService = {
  async getConversations() {
    const { data, error } = await supabase
      .from('conversations')
      .select(`
        *,
        patient:patients(id, name, email, phone, avatar_url)
      `)
      .order('last_activity', { ascending: false });
    
    if (error) throw error;
    return data;
  },
  
  async getConversation(id: string) {
    const { data, error } = await supabase
      .from('conversations')
      .select(`
        *,
        patient:patients(id, name, email, phone, avatar_url),
        messages(*)
      `)
      .eq('id', id)
      .order('messages.timestamp', { ascending: true })
      .single();
    
    if (error) throw error;
    return data;
  },
  
  async updateConversation(id: string, updates: any) {
    const { data, error } = await supabase
      .from('conversations')
      .update(updates)
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },
  
  async archiveConversation(id: string) {
    const data = await this.updateConversation(id, { is_archived: true });
    return { success: true, data };
  },
  
  async unarchiveConversation(id: string) {
    const data = await this.updateConversation(id, { is_archived: false });
    return { success: true, data };
  },
  
  async sendMessage(conversationId: string, content: string) {
    // Update the conversation's last_activity timestamp
    await supabase
      .from('conversations')
      .update({ last_activity: new Date().toISOString() })
      .eq('id', conversationId);
    
    // Insert the new message
    const { data, error } = await supabase
      .from('messages')
      .insert({
        conversation_id: conversationId,
        content,
        is_outgoing: true,
        status: 'sent'
      })
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },
  
  async addPatientFromConversation(conversation: any) {
    console.log("Adding patient from conversation:", conversation);
    
    try {
      // Check if the conversation has patient_id
      const patientId = conversation.patient_id;
      
      if (!patientId) {
        console.error('No patient_id available in conversation');
        throw new Error('No patient_id available in conversation');
      }
      
      // Get patient data from conversation
      const patientName = conversation.patient?.name || 
                         conversation.contact?.name || 
                         "Unknown Patient";
      
      const patientEmail = conversation.patient?.email || 
                          conversation.contact?.email || 
                          null;
                          
      const patientPhone = conversation.patient?.phone || 
                          conversation.contact?.phone || 
                          null;
                          
      const patientAvatar = conversation.patient?.avatar_url || 
                            conversation.contact?.avatar || 
                            null;
      
      console.log("Patient data to save:", {
        id: patientId,
        name: patientName,
        email: patientEmail,
        phone: patientPhone,
        avatar_url: patientAvatar
      });
      
      // Check if patient already exists
      const { data: existingPatient, error: checkError } = await supabase
        .from('patients')
        .select('*')
        .eq('id', patientId)
        .maybeSingle();
      
      if (checkError) {
        console.error('Error checking existing patient:', checkError);
        throw checkError;
      }
      
      console.log("Existing patient check result:", existingPatient);
      
      let result;
      
      // If patient exists, update their data
      if (existingPatient) {
        console.log("Patient exists, updating...");
        const { data: updatedPatient, error: updateError } = await supabase
          .from('patients')
          .update({
            name: patientName,
            email: patientEmail,
            phone: patientPhone,
            avatar_url: patientAvatar,
            updated_at: new Date().toISOString()
          })
          .eq('id', patientId)
          .select()
          .single();
        
        if (updateError) {
          console.error('Error updating patient:', updateError);
          throw updateError;
        }
        
        console.log("Patient updated successfully:", updatedPatient);
        result = updatedPatient;
      } else {
        // Create a new patient if they don't exist
        console.log("Patient doesn't exist, creating new...");
        const { data: newPatient, error: insertError } = await supabase
          .from('patients')
          .insert({
            id: patientId,
            name: patientName,
            email: patientEmail,
            phone: patientPhone,
            avatar_url: patientAvatar
          })
          .select()
          .single();
        
        if (insertError) {
          console.error('Error creating patient:', insertError);
          throw insertError;
        }
        
        console.log("New patient created successfully:", newPatient);
        result = newPatient;
      }
      
      return { success: true, data: result };
    } catch (error) {
      console.error("Error in addPatientFromConversation:", error);
      return { success: false, error };
    }
  }
};
